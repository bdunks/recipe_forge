defmodule RecipeForge.RecipesFixtures do
  @moduledoc """
  This module defines test helpers for creating
  entities via the `RecipeForge.Recipes` context.
  """


  @doc """
  Generate a recipe with proper string keys.
  """
  def recipe_fixture(attrs \\ %{}) do
    {:ok, recipe} =
      attrs
      |> Enum.into(%{
        "name" => "Test Recipe",
        "description" => "A delicious recipe",
        "instructions" => "Mix and cook",
        "prep_time" => "10 min",
        "cook_time" => "20 min",
        "servings" => 4,
        "yield_description" => "4 servings",
        "image_url" => "https://example.com/image.jpg",
        "notes" => "Test recipe notes",
        "nutrition" => %{},
        "category_tags" => "test category",
        "recipe_ingredients" => %{}
      })
      |> RecipeForge.Recipes.create_recipe()

    recipe
  end

  @doc """
  Generate recipe attributes for testing (without persisting).
  """
  def recipe_attrs(attrs \\ %{}) do
    Enum.into(attrs, %{
      "name" => "Test Recipe",
      "description" => "A delicious recipe",
      "instructions" => "Mix and cook",
      "prep_time" => "10 min",
      "cook_time" => "20 min",
      "servings" => 4,
      "yield_description" => "4 servings",
      "image_url" => "https://example.com/image.jpg",
      "notes" => "Test recipe notes",
      "nutrition" => %{},
      "category_tags" => "test category",
      "recipe_ingredients" => %{}
    })
  end

  @doc """
  Generate recipe attributes with ingredients.
  """
  def recipe_with_ingredients_attrs(ingredient_data \\ []) do
    ingredients = 
      ingredient_data
      |> Enum.with_index()
      |> Enum.into(%{}, fn {ingredient, index} ->
        {Integer.to_string(index), %{
          "ingredient_name" => ingredient[:name] || "ingredient_#{index}",
          "quantity" => ingredient[:quantity] || "1",
          "unit" => ingredient[:unit] || "cup",
          "notes" => ingredient[:notes] || ""
        }}
      end)

    recipe_attrs(%{
      "recipe_ingredients" => ingredients
    })
  end

  @doc """
  Generate recipe attributes with duplicate ingredients (for testing validation).
  """
  def recipe_with_duplicate_ingredients_attrs do
    recipe_attrs(%{
      "recipe_ingredients" => %{
        "0" => %{
          "ingredient_name" => "flour",
          "quantity" => "1",
          "unit" => "cup",
          "notes" => ""
        },
        "1" => %{
          "ingredient_name" => "flour",
          "quantity" => "2",
          "unit" => "cups",
          "notes" => "different amount"
        }
      }
    })
  end

  @doc """
  Generate AI recipe data for testing create_recipe_from_ai.
  """
  def ai_recipe_data(attrs \\ %{}) do
    Enum.into(attrs, %{
      name: "Test AI Recipe",
      description: "AI generated recipe",
      instructions: ["Step 1", "Step 2", "Step 3"],
      prep_time: "15 min",
      cook_time: "30 min",
      servings: 4,
      yield_description: "4 servings",
      image_url: "https://example.com/ai-recipe.jpg",
      notes: "Generated by AI",
      nutrition: %{calories: 200, protein: 10},
      category_name: RecipeForge.Recipes.default_ai_category(),
      ingredients: [
        %{name: "flour", quantity: "2", unit: "cups", notes: "all-purpose"},
        %{name: "sugar", quantity: "1", unit: "cup", notes: "white"}
      ]
    })
  end
end
